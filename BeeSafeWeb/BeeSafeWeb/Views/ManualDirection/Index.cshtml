@model IEnumerable<BeeSafeWeb.Utility.Models.Device>

@{
ViewData["Title"] = "Set Hornet Direction";
}

<h1 class="text-3xl font-bold mb-4">Set Hornet Direction</h1>

<!-- Device List -->
<div class="mb-6">
    <h2 class="text-xl font-semibold mb-2">Devices</h2>
    <table class="min-w-full border">
        <thead>
        <tr>
            <th class="border p-2">Name</th>
            <th class="border p-2">Location</th>
            <th class="border p-2">Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var device in Model)
        {
        <tr>
            <td class="border p-2">@device.Name</td>
            <td class="border p-2">
                @device.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
                @device.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture)
            </td>
            <td class="border p-2">
                <!-- Pass the device's current Direction as well -->
                <button type="button" class="bg-blue-500 text-white px-3 py-1 rounded"
                        onclick="openDirectionModal(
                            '@device.Id',
                        @device.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
                        @device.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
                            '@device.Name',
                        @device.Direction.ToString(System.Globalization.CultureInfo.InvariantCulture)
                            )">
                    Set Hornet Direction
                </button>
            </td>
        </tr>
        }
        </tbody>
    </table>
</div>

<!-- Modal for setting hornet direction and manual detection data -->
<div id="directionModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center">
    <div class="bg-gray-900 rounded-lg p-6 w-11/12 md:w-1/2 lg:w-1/3">
        <h2 class="text-xl font-bold mb-4 text-white" id="modalTitle">Set Hornet Direction</h2>
        <!-- Map inside the modal -->
        <div id="modalMap" class="w-full h-[300px] rounded mb-4"></div>
        <!-- Display the current (manual override) direction -->
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-300">Current Direction (degrees):</label>
            <input type="number" id="currentDirection" class="mt-1 block w-full border border-gray-600 rounded-md bg-gray-800 text-white" readonly />
        </div>
        <!-- Additional inputs for manual detection data -->
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-300">Number of Hornets Spotted:</label>
            <input type="number" id="numberOfHornets" name="NumberOfHornets" class="mt-1 block w-full border border-gray-600 rounded-md bg-gray-800 text-white" placeholder="Optional (default 1)" />
        </div>
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-300">Flight Time (minutes):</label>
            <input type="number" step="0.1" id="flightTimeMinutes" name="FlightTimeMinutes" class="mt-1 block w-full border border-gray-600 rounded-md bg-gray-800 text-white" placeholder="Optional (default 0.5)" />
        </div>
        <!-- Form for confirming the manual detection -->
        <form method="post" asp-action="SubmitManualDetection" asp-controller="ManualDirection">
            @Html.AntiForgeryToken()
            <input type="hidden" id="formDeviceId" name="DeviceId" />
            <input type="hidden" id="formHornetDirection" name="HornetDirection" />
            <div class="flex justify-end space-x-2">
                <button type="button" class="bg-gray-600 text-white px-4 py-2 rounded" onclick="closeModal()">Cancel</button>
                <button type="submit" class="bg-yellow-500 text-white px-4 py-2 rounded" onclick="confirmDirection()">Confirm</button>
            </div>
        </form>
        <p class="mt-2 text-sm text-gray-300">
            Tip: Move your mouse on the map to set the red line direction. Click on the map to lock/unlock the red line.
            The grey area shows the device’s current field-of-view.
        </p>
    </div>
</div>

@section Scripts {
<script>
    // Global variables for the modal map and state.
    var modalMap = null, deviceLat, deviceLng, currentBearing = 0;
    var arrowLocked = false, currentDeviceId = null;
    var arrowMarker = null;
    var fovPolygon = null; // For the fixed FOV display

    // Utility functions for degree/radian conversion.
    function toRadians(deg) {
        return deg * (Math.PI / 180);
    }
    function toDegrees(rad) {
        return rad * (180 / Math.PI);
    }
    // Calculate bearing from (lat1, lng1) to (lat2, lng2)
    function calculateBearing(lat1, lng1, lat2, lng2) {
        var φ1 = toRadians(lat1);
        var φ2 = toRadians(lat2);
        var Δλ = toRadians(lng2 - lng1);
        var y = Math.sin(Δλ) * Math.cos(φ2);
        var x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
        var θ = Math.atan2(y, x);
        return (toDegrees(θ) + 360) % 360;
    }

    // Create a polygon representing the device's fixed field-of-view.
    function createFOVPolygon(center, direction) {
        const fovAngle = 40; // Fixed FOV angle in degrees
        const fovDistance = 0.0005; // Fixed distance (adjust as needed)
        let startAngle = direction - fovAngle / 2;
        let endAngle = direction + fovAngle / 2;
        let points = [center];
        for (let angle = startAngle; angle <= endAngle; angle += 5) {
            let rad = angle * (Math.PI / 180);
            let latOffset = fovDistance * Math.cos(rad);
            let lngOffset = fovDistance * Math.sin(rad);
            points.push([center.lat + latOffset, center.lng + lngOffset]);
        }
        points.push(center);
        return L.polygon(points, {
            color: 'grey',
            fillColor: 'lightgrey',
            fillOpacity: 0.3,
            interactive: false
        });
    }

    // Open the modal: initialize the modal map centered on the selected device.
    // Added parameter "deviceDirection" (the device's current direction)
    function openDirectionModal(deviceId, lat, lng, deviceName, deviceDirection) {
        currentDeviceId = deviceId;
        deviceLat = parseFloat(lat);
        deviceLng = parseFloat(lng);
        document.getElementById('formDeviceId').value = deviceId;
        document.getElementById('modalTitle').innerText = "Set Hornet Direction for " + deviceName;
        document.getElementById('currentDirection').value = "0.0";
        currentBearing = 0;
        arrowLocked = false;

        // Show the modal.
        document.getElementById('directionModal').classList.remove('hidden');

        // Remove any existing modalMap.
        if (modalMap) {
            modalMap.off();
            modalMap.remove();
            modalMap = null;
            document.getElementById('modalMap').innerHTML = "";
        }

        // Initialize a new modal map centered on the device.
        modalMap = L.map('modalMap').setView([deviceLat, deviceLng], 16);
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; OpenStreetMap'
        }).addTo(modalMap);

        // Add a marker for the device location.
        L.marker([deviceLat, deviceLng]).addTo(modalMap);

        // Add the fixed FOV polygon (using the device's current direction) in grey.
        var center = L.latLng(deviceLat, deviceLng);
        fovPolygon = createFOVPolygon(center, parseFloat(deviceDirection));
        fovPolygon.addTo(modalMap);

        // Add a line marker (using a divIcon) at the device location for the manual override.
        // The icon is a 2px x 60px red line.
        // iconAnchor is set to [1, 0] so that the top-center of the line is anchored at the device.
        var arrowIcon = L.divIcon({
            className: 'arrow-icon',
            html: '<div id="arrow" style="width:2px; height:60px; background:red; transform-origin: 50% 0% !important;"></div>',
            iconSize: [2, 60],
            iconAnchor: [1, 0]
        });
        arrowMarker = L.marker([deviceLat, deviceLng], { icon: arrowIcon, interactive: false }).addTo(modalMap);

        // Listen for mouse move events on the modal map.
        modalMap.on('mousemove', onModalMapMouseMove);
        // Listen for click events on the modal map to toggle lock.
        modalMap.on('click', onModalMapClick);
    }

    function onModalMapMouseMove(e) {
        if (arrowLocked) return;
        var mouseLat = e.latlng.lat;
        var mouseLng = e.latlng.lng;
        var computedBearing = calculateBearing(deviceLat, deviceLng, mouseLat, mouseLng);
        // Adjust by 180° because our red line's default orientation is down.
        currentBearing = (computedBearing + 180) % 360;
        updateArrowRotation();
        document.getElementById('currentDirection').value = currentBearing.toFixed(1);
    }

    function onModalMapClick(e) {
        arrowLocked = !arrowLocked;
    }

    function updateArrowRotation() {
        if (arrowMarker) {
            var arrowEl = document.getElementById('arrow');
            if (arrowEl) {
                arrowEl.style.transform = "rotate(" + currentBearing + "deg)";
            }
        }
    }

    function confirmDirection() {
        // Replace the period with a comma so that the decimal separator is correct.
        document.getElementById('formHornetDirection').value = currentBearing.toFixed(1).replace('.', ',');
        if (modalMap) {
            modalMap.off('mousemove', onModalMapMouseMove);
            modalMap.off('click', onModalMapClick);
        }
        closeModal();
    }

    function closeModal() {
        if (modalMap) {
            modalMap.off();
            modalMap.remove();
            modalMap = null;
            document.getElementById('modalMap').innerHTML = "";
        }
        document.getElementById('directionModal').classList.add('hidden');
    }
</script>
<style>
    .arrow-icon {
        background: transparent;
    }
    .arrow-icon > div {
        transform-origin: 50% 0% !important;
    }
</style>
}
