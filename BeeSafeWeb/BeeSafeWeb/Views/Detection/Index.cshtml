@using BeeSafeWeb.Utility.Geometry
@model IEnumerable<dynamic>

@{ 
    Layout = "_Layout";
    IEnumerable<dynamic> detections = Model;
    var devices = (IEnumerable<dynamic>) ViewData["Devices"];
    ViewData["Title"] = ViewData["BigTitle"] = "Manage detection events";
    Circle circle = (Circle) ViewData["Triangulation"];
}

<div>
    <p>Click on a device on the map to filter by device.</p>
    <a asp-action="Index">
        <button class="bg-yellow-600 border p-4 my-2 border-yellow-200 rounded">
            View all
        </button>
    </a>
    <button onclick="viewAverage()" class="bg-yellow-600 border p-4 my-2 border-yellow-200 rounded">
        View average
    </button>
    <a asp-action="Index" asp-route-triangulate="true">
        <button class="bg-yellow-600 border p-4 my-2 border-yellow-200 rounded">
            Triangulate hornet nest
        </button>
    </a>
    <div class="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2 items-start justify-center">
        <div style="width: 500px; height:  500px" id="map"></div>
        <table class="w-full border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-300 shadow-lg mt-6 text-sm md:text-base">
            <thead class="bg-gray-300 dark:bg-gray-700">
            <tr>
                <th class="p-2 md:p-3">Timestamp</th>
                <th class="p-2 md:p-3">Direction</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var detection in detections)
            {
                <tr class="border-t border-gray-200 text-center dark:border-gray-600">
                    <td class="p-2 md:p-3">@detection.Timestamp</td>
                    <td class="p-2 md:p-3">@detection.HornetDirectionÂ°</td>
                </tr>
            }
            </tbody>
        </table>
        </div>
    </div>

@section Scripts
{ 
    <script>
        let position = [[51.168300, 4.980980], 14];
        
        let sPosition = localStorage.getItem('position');
        if (sPosition !== undefined)
        {
            position = JSON.parse(sPosition);
        }
        
        let map = L.map('map').setView(position[0], position[1]);
        
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        
        
        const devices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(devices));
        /* reminder: if the get parameter "device" is set, then this is only
         * that belong to the selected device.
         */
        const detectionEvents = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(detections));
        
        function getRandomColor() {
            const colors = [
                'red',
                'orange',
                'yellow',
                'green',
                'blue',
            ];
            
            let colorIndex = Math.round(Math.random() * (colors.length - 1));
            let color = colors[colorIndex];
            
            return color;
        }

        let color = "";
        function drawMap(_devices, _detections) {
            /* clear the map */
            map.eachLayer((layer) => {
                // Only remove layers that are not the tile layer
                if (!(layer instanceof L.TileLayer)) {
                    map.removeLayer(layer);
                }
            });
            
            _devices.forEach((device) => {
                if (device.__color === undefined) {
                    let old_color = color;
                    while(old_color === color) {
                        color = getRandomColor()
                    }
                    
                    device.__color = color;
                }
                

                _detections.forEach((detection) => {
                    if (detection.Device.Id !== device.Id)
                        return;

                    let rads = (detection.HornetDirection + device.Direction) * (Math.PI / 180);
                    console.log(rads);

                    const numberOfDegreesIn1KM = 1/111;

                    let line = [
                        [device.Latitude, device.Longitude],
                        [device.Latitude + Math.cos(rads) * numberOfDegreesIn1KM, device.Longitude + Math.sin(rads) * numberOfDegreesIn1KM]
                    ]
                    
                    const polyline = L.polyline(line, {
                        color: device.__color,
                        weight: 4,
                        opacity: 0.7
                    }).addTo(map);
                });
                const marker = L.marker([device.Latitude, device.Longitude])
                    .addTo(map)
                    .bindPopup(`Device ${device.Id}`);
                marker.on('click', () => {
                    let sOutPosition = JSON.stringify([map.getCenter(), map.getZoom()])
                    localStorage.setItem('position', sOutPosition);
                    window.location = `/Detection?device=${device.Id}`;
                });
            });
        }

        function viewAverage() {
            /* really? javascript doesn't give you average? */
            const average = array => array.reduce((a, b) => a + b) / array.length;
            
            let averageDetections = [];
            devices.forEach((dev) => {
                let filtered = detectionEvents.filter((event) => event.Device.Id === dev.Id).map((event) => event.HornetDirection);
                if (filtered.length === 0)
                    return;
                let direction = average(filtered);
                let newDetection = {
                    Device: {
                        Id: dev.Id
                    },
                    HornetDirection: direction
                };
                
                averageDetections.push(newDetection);
            })
            drawMap(devices, averageDetections);
        }
        
        if (new URL(window.location).searchParams.has('triangulate'))  {
            viewAverage();
        } else {
            drawMap(devices, detectionEvents);
        }
    </script>
}
