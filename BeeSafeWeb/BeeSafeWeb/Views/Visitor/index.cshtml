@{
    var activeNests = ViewData["ActiveNests"] as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>();
    var destroyedNests = ViewData["DestroyedNests"] as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>();
    var totalNests = activeNests.Count() + destroyedNests.Count();
}

<!-- Parallax Scrolling Section -->
<header class="relative h-[500px] bg-cover bg-center bg-[url('your-image-url.jpg')] dark:bg-gray-800">
    <div class="absolute inset-0 bg-black/50 flex items-center justify-center">
        <div class="text-center text-white px-6 md:px-12">
            <h1 class="text-4xl md:text-6xl font-extrabold leading-tight dark:text-yellow-400">
                Welcome to BeeSafe
            </h1>
            <p class="mt-4 text-lg md:text-xl dark:text-gray-300">
                Your solution for tracking hornet nests with ease.
            </p>
            <a href="#learn-more"
               class="mt-6 inline-block bg-yellow-500 text-lg font-semibold px-8 py-3 rounded-md shadow-md 
                      transition duration-300 hover:bg-yellow-600 dark:bg-yellow-400 dark:text-gray-900">
                Learn More
            </a>
        </div>
    </div>
</header>

<!-- Full-Width Statistics Section -->
<section class="bg-gray-800 dark:bg-gray-900 text-white py-16">
    <div class="container mx-auto flex flex-wrap justify-around text-center">
        <div class="w-full md:w-1/3 mb-6 md:mb-0">
            <h2 class="text-5xl font-bold dark:text-yellow-400">@totalNests</h2>
            <p class="text-xl mt-2 dark:text-gray-300">Hornet Nests Tracked</p>
        </div>
        <div class="w-full md:w-1/3 mb-6 md:mb-0">
            <h2 class="text-5xl font-bold dark:text-yellow-400">@activeNests.Count()</h2>
            <p class="text-xl mt-2 dark:text-gray-300">Active Cases</p>
        </div>
        <div class="w-full md:w-1/3">
            <h2 class="text-5xl font-bold dark:text-yellow-400">@destroyedNests.Count()</h2>
            <p class="text-xl mt-2 dark:text-gray-300">Neutralized Nests</p>
        </div>
    </div>
</section>
<!-- Map and Info Section -->
<div class="container mx-auto mt-10 px-4 sm:px-8 dark:bg-gray-900">
    <div class="flex justify-left mb-6">
        <h1 class="text-5xl font-bold text-gray-800 dark:text-yellow-400">Search Hornet Nest Locations:</h1>
    </div>

    <div class="flex flex-col lg:flex-row items-start gap-8 p-6 sm:p-12 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-lg">
        <!-- Leaflet Map -->
        <div class="w-full sm:w-4/5 lg:w-2/3 border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden shadow-md order-2 lg:order-1 z-0">
            <div id="map" class="w-full h-[60vh] dark:bg-gray-700 z-0"></div>
        </div>

        <!-- Information Box with Search Bar -->
        <div class="w-full sm:w-4/5 lg:w-1/3 flex flex-col gap-6 order-1 lg:order-2">
            <div class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                <h3 class="text-2xl font-bold text-gray-800 dark:text-yellow-400 mb-4">Nest Info</h3>
                <!-- Search Bar -->
                <div class="flex flex-col sm:flex-row w-full gap-4 mb-6">
                    <input id="city-search" type="text" placeholder="Enter city name"
                           class="w-full p-3 border border-gray-300 rounded-lg shadow-sm 
                                  focus:outline-none focus:ring-2 focus:ring-yellow-500 
                                  dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:placeholder-gray-400">
                    <button onclick="searchCity()"
                            class="bg-yellow-500 px-6 py-3 rounded-md text-lg font-semibold shadow-md 
                                   hover:bg-yellow-600 dark:bg-yellow-400 dark:text-gray-900">
                        Search
                    </button>
                </div>
                <p id="default-message" class="text-gray-600 dark:text-gray-300 mt-2">
                    Select a circle to see more information.
                </p>
                <p id="accuracy-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Accuracy Radius: <b id="accuracy"></b> meters
                </p>
                <p id="timestamp-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Last Updated: <b id="timestamp"></b>
                </p>
                <p id="status-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Status: <b id="status"></b>
                </p>
            </div>

            <!-- Information box for searched city -->
            <div id="search-results-box" class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600 hidden">
                <div class="bg-white dark:bg-gray-700 p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                    <h3 class="text-2xl font-bold text-gray-800 dark:text-yellow-400 mb-4">Search Results</h3>
                    <p id="total-nests" class="text-gray-600 dark:text-gray-300 mt-2 hidden"></p>
                    <p id="active-nests" class="text-green-500 mt-2 hidden"></p>
                    <p id="destroyed-nests" class="text-red-500 mt-2 hidden"></p>
                    <div class="mt-4 flex justify-between">
                        <button id="prev-nest" onclick="showPreviousNest()" class="bg-yellow-500 px-4 py-2 rounded-md text-lg font-semibold shadow-md hover:bg-yellow-600 dark:bg-yellow-400 dark:text-gray-900 hidden">
                            Previous
                        </button>
                        <button id="next-nest" onclick="showNextNest()" class="bg-yellow-500 px-4 py-2 rounded-md text-lg font-semibold shadow-md hover:bg-yellow-600 dark:bg-yellow-400 dark:text-gray-900 hidden">
                            Next
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Global variable declarations
    var map = L.map('map').setView([51.168300, 4.980980], 10);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    // Global nest data (active nests only) as passed in by the controller
    var nestEstimates = [
        @foreach (var nest in (IEnumerable<dynamic>)ViewData["ActiveNests"])
        {
        <text>, {
            lat: @nest.lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
            lng: @nest.lng.ToString(System.Globalization.CultureInfo.InvariantCulture),
            radius: @nest.radius.ToString(System.Globalization.CultureInfo.InvariantCulture),
            timestamp: '@nest.timestamp.ToString("dd-MM-yyyy HH:mm:ss")',
            IsDestroyed: @(nest.IsDestroyed ? 1 : 0)
        }, </text>
        }
    ];

    // Global variable for filtered nests from search
    var filteredNests = [];
    var currentNestIndex = 0;

    // Add circles for all nest estimates (active nests)
    nestEstimates.forEach(function(nest) {
        var circleColor = nest.IsDestroyed === 1 ? "green" : "red";
        var fillColor = nest.IsDestroyed === 1 ? "#0f0" : "#f03";

        var circle = L.circle([nest.lat, nest.lng], {
            color: circleColor,
            fillColor: fillColor,
            fillOpacity: 0.5,
            radius: parseFloat(nest.radius)
        }).addTo(map).bindPopup(`Accuracy: ${parseFloat(nest.radius).toFixed(2)}m`);

        // Click event to show nest details
        circle.on('click', function () {
            document.getElementById('accuracy').innerText = parseFloat(nest.radius).toFixed(2);
            document.getElementById('timestamp').innerText = nest.timestamp;
            document.getElementById('status').innerText = nest.IsDestroyed === 1 ? "Destroyed" : "Active";

            document.getElementById('default-message').style.display = 'none';
            document.getElementById('accuracy-label').classList.remove('hidden');
            document.getElementById('timestamp-label').classList.remove('hidden');
            document.getElementById('status-label').classList.remove('hidden');

            map.setView([nest.lat, nest.lng], 16);
        });
    });

    document.getElementById('city-search').addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            searchCity();
        }
    });

    function searchCity() {
        var cityName = document.getElementById('city-search').value;
        if (!cityName) {
            Swal.fire({
                position: "top-end",
                icon: 'warning',
                title: 'Oops...',
                toast: true,
                text: 'Please enter a city name!',
                showConfirmButton: false,
                timer: 2500,
                background: '#FFA500',
            });
            return;
        }

        fetch(`https://nominatim.openstreetmap.org/search?format=json&countrycodes=BE&q=${cityName}`)
            .then(response => response.json())
            .then(function(data) {
                if (data.length > 0) {
                    var cityCoords = [parseFloat(data[0].lat), parseFloat(data[0].lon)];

                    // Find nests within a 5km radius
                    filteredNests = nestEstimates.filter(function(nest) {
                        var distance = getDistanceFromLatLonInKm(nest.lat, nest.lng, cityCoords[0], cityCoords[1]);
                        return distance <= 5;
                    });

                    if (filteredNests.length > 0) {
                        currentNestIndex = 0;
                        updateNestInfo(cityName, filteredNests);

                        // Zoom to the first nest
                        zoomToNest(filteredNests[currentNestIndex]);

                        // Show next/previous buttons if there are multiple nests
                        document.getElementById('prev-nest').classList.toggle('hidden', filteredNests.length <= 1);
                        document.getElementById('next-nest').classList.toggle('hidden', filteredNests.length <= 1);

                        Swal.fire({
                            position: "top-end",
                            icon: 'success',
                            title: 'Nests Found!',
                            text: `Nests found near ${cityName}. Zooming in...`,
                            toast: true,
                            timer: 2500,
                            showConfirmButton: false,
                            background: '#28a745',
                        });
                    } else {
                        document.getElementById('search-results-box').classList.remove('hidden');
                        document.getElementById('total-nests').innerHTML = `No nests found near "${cityName}".`;
                        document.getElementById('total-nests').classList.remove('hidden');
                        document.getElementById('active-nests').classList.add('hidden');
                        document.getElementById('destroyed-nests').classList.add('hidden');
                        document.getElementById('prev-nest').classList.add('hidden');
                        document.getElementById('next-nest').classList.add('hidden');

                        Swal.fire({
                            position: "top-end",
                            icon: 'info',
                            title: 'No Nests Found',
                            text: `No nests found near ${cityName}.`,
                            toast: true,
                            timer: 2500,
                            showConfirmButton: false,
                            background: '#17a2b8',
                        });
                    }
                } else {
                    Swal.fire({
                        position: "top-end",
                        icon: 'error',
                        title: 'City Not Found',
                        text: 'Please enter a valid city in Belgium.',
                        toast: true,
                        timer: 2500,
                        showConfirmButton: false,
                        background: '#fd7e14',
                    });
                }
            })
            .catch(function(error) {
                Swal.fire({
                    position: "top-end",
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while fetching city data. Please try again.',
                    toast: true,
                    timer: 2500,
                    showConfirmButton: false,
                    background: '#dc3545',
                });
            });
    }

    function updateNestInfo(cityName, filteredNests) {
        var activeCount = filteredNests.filter(function(nest) {
            return nest.IsDestroyed === 0;
        }).length;
        var destroyedCount = filteredNests.filter(function(nest) {
            return nest.IsDestroyed === 1;
        }).length;

        document.getElementById('total-nests').innerHTML = `Total nests found near ${cityName}: <b>${filteredNests.length}</b>`;
        document.getElementById('active-nests').innerHTML = `Active nests: <b>${activeCount}</b>`;
        document.getElementById('destroyed-nests').innerHTML = `Destroyed nests: <b>${destroyedCount}</b>`;

        document.getElementById('search-results-box').classList.remove('hidden');
        document.getElementById('total-nests').classList.remove('hidden');
        document.getElementById('active-nests').classList.remove('hidden');
        document.getElementById('destroyed-nests').classList.remove('hidden');
    }

    function zoomToNest(nest) {
        map.flyTo([nest.lat, nest.lng], 16, {
            animate: true,
            duration: 0.8,
            easeLinearity: 0.25
        });

        document.getElementById('accuracy').innerText = parseFloat(nest.radius).toFixed(2);
        document.getElementById('timestamp').innerText = nest.timestamp;
        document.getElementById('status').innerText = nest.IsDestroyed === 1 ? "Destroyed" : "Active";

        document.getElementById('default-message').style.display = 'none';
        document.getElementById('accuracy-label').classList.remove('hidden');
        document.getElementById('timestamp-label').classList.remove('hidden');
        document.getElementById('status-label').classList.remove('hidden');

        setTimeout(function() {
            L.popup()
                .setLatLng([nest.lat, nest.lng])
                .setContent(`Nest Accuracy: ${parseFloat(nest.radius).toFixed(2)}m<br>Status: ${nest.IsDestroyed ? 'Destroyed' : 'Active'}`)
                .openOn(map);
        }, 1500);
    }

    function showNextNest() {
        currentNestIndex = (currentNestIndex + 1) % filteredNests.length;
        zoomToNest(filteredNests[currentNestIndex]);
    }

    function showPreviousNest() {
        currentNestIndex = (currentNestIndex - 1 + filteredNests.length) % filteredNests.length;
        zoomToNest(filteredNests[currentNestIndex]);
    }

    function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
        var R = 6371;
        var dLat = deg2rad(lat2 - lat1);
        var dLon = deg2rad(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    function deg2rad(deg) {
        return deg * (Math.PI / 180);
    }
</script>
}
