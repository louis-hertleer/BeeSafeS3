@model IEnumerable<dynamic>

@{
Layout = "_Layout";
IEnumerable<dynamic> detections = Model;
var devices = ViewData["Devices"] as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>();
var nestEstimates = ViewData["NestEstimates"] as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>();
ViewData["Title"] = "Home Page";
}

<div class="container mx-auto mt-10 dark:bg-gray-900">
    <div class="flex justify-left mb-6">
        <h1 class="text-5xl font-bold text-gray-800 dark:text-yellow-400">🐝 Overview</h1>
    </div>

    <div class="flex flex-wrap lg:flex-nowrap items-start gap-8 p-12 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-lg">
        <!-- Leaflet Map -->
        <div class="w-full lg:w-2/3 border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden shadow-md z-0">
            <div id="map" class="w-full h-[60vh] dark:bg-gray-700 z-0"></div>
        </div>

        <!-- Information Section -->
        <div class="w-full lg:w-1/3 flex flex-col gap-6">
            <!-- Hornet Nest Info Box -->
            <div class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                <h3 class="text-2xl font-bold flex items-center dark:text-yellow-400">
                    <span class="mr-2">🐝</span> Hornet Nest Info
                </h3>
                <div id="nest-filter" class="mt-2 flex items-center">
                    <div class="relative inline-block w-11 h-5">
                        <input id="showDestroyedToggle" type="checkbox" class="peer appearance-none w-11 h-5 bg-gray-900 rounded-full checked:bg-yellow-500 cursor-pointer transition-colors duration-300" />
                        <label for="showDestroyedToggle" class="absolute top-0 left-0 w-5 h-5 bg-white rounded-full border border-slate-300 shadow-sm transition-transform duration-300 peer-checked:translate-x-6 peer-checked:border-yellow-500 cursor-pointer"></label>
                    </div>
                    <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">Show Destroyed Nests</span>
                </div>
                <p id="default-message" class="text-gray-600 dark:text-gray-300 mt-4 italic">
                    Click on a nest to view details.
                </p>
                <p id="accuracy-label" class="text-gray-700 dark:text-gray-300 mt-2 hidden">
                    📏 Accuracy Radius: <b id="accuracy"></b> meters
                </p>
                <p id="timestamp-label" class="text-gray-700 dark:text-gray-300 mt-2 hidden">
                    ⏱ Last Updated: <b id="timestamp"></b>
                </p>
                <p id="status-label" class="text-gray-700 dark:text-gray-300 mt-2 hidden">
                    ⚠ Status: <b id="status"></b>
                </p>
                <div id="nest-status-buttons" class="mt-4 hidden">
                    <form id="nest-status-form" method="post" action="@Url.Action("UpdateNestStatus", "Home")">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="id" name="id" value="" />
                        <input type="hidden" id="isDestroyed" name="isDestroyed" value="" />
                        <button type="submit" id="toggle-status-btn" class="bg-indigo-500 text-white px-4 py-2 rounded-md">
                            Toggle Status
                        </button>
                    </form>
                </div>
            </div>

            <!-- Device Overview Box -->
            <div class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                <h3 class="text-2xl font-bold flex items-center dark:text-yellow-400">
                    <span class="mr-2">📡</span> Device Overview
                </h3>
                <p class="mt-4 text-gray-600 dark:text-gray-300">Total Devices: <b>@devices.Count()</b></p>
                <p class="mt-2 text-gray-600 dark:text-gray-300">Online Devices: <b id="online-device-count">@devices.Count(d => d.IsOnline)</b></p>
                <p class="mt-2 text-gray-600 dark:text-gray-300">Tracking Mode: <b>@devices.Count(d => d.IsTracking)</b></p>
            </div>

            <!-- Device Info Box -->
            <div class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                <h3 class="text-2xl font-bold flex items-center dark:text-yellow-400">
                    <span class="mr-2">🔍</span> Device Info
                </h3>
                <p id="device-message" class="text-gray-600 dark:text-gray-300 mt-4">
                    Click on a device marker to see details.
                </p>
                <p id="device-status-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Status: <b id="device-status"></b>
                </p>
                <p id="device-mode-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Current mode: <b id="device-mode"></b>
                </p>
                <p id="device-last-active-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Last active: <b id="device-last-active"></b>
                </p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    console.log("Initializing map and markers...");

    // Icon for device marker.
    var cameraIcon = L.icon({
        iconUrl: '/assets/photo-camera.svg',
        iconSize: [30, 30],
        iconAnchor: [20, 40],
        popupAnchor: [0, -35]
    });

    var selectedNestId = null;
    var map = L.map('map');
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    var deviceBounds = [];
    var devices = [
        @foreach (var device in devices.Select((d, index) => new { d, index }))
        {
        var separator = device.index == 0 ? "" : ",";
        <text>@separator{
            lat: @device.d.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
            lng: @device.d.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
            id: '@device.d.Id',
            isOnline: @(device.d.IsOnline ? "true" : "false"),
            isTracking: @(device.d.IsTracking ? "true" : "false"),
            lastActive: '@device.d.LastActiveString',
            name: '@device.d.Name',
            Direction: @device.d.Direction.ToString(System.Globalization.CultureInfo.InvariantCulture)
        }</text>
        }
    ];

    devices.forEach(function(device) {
        if (device.lat && device.lng) {
            var marker = L.marker([device.lat, device.lng], { icon: cameraIcon })
                .addTo(map)
                .bindPopup(`<b>${device.name}</b><br>Last Active: ${device.lastActive}`);
            deviceBounds.push([device.lat, device.lng]);

            marker.on('click', function () {
                console.log("Device marker clicked:", device);
                document.getElementById('device-status').innerText = device.isOnline === "true" ? 'Online' : 'Offline';
                document.getElementById('device-mode').innerText = device.isTracking === "true" ? 'Tracking' : 'Defence';
                document.getElementById('device-last-active').innerText = device.lastActive;
                document.getElementById('device-message').style.display = 'none';
                document.getElementById('device-status-label').classList.remove('hidden');
                document.getElementById('device-mode-label').classList.remove('hidden');
                document.getElementById('device-last-active-label').classList.remove('hidden');
            });
        }
    });

    if (deviceBounds.length > 0) {
        map.fitBounds(deviceBounds, {
            padding: [50, 50],
            maxZoom: 18,
            animate: true
        });
    } else {
        map.setView([51.168300, 4.980980], 10);
    }

    var nestEstimates = [
        @foreach (var nest in ((IEnumerable<dynamic>)ViewData["NestEstimates"]).Select((n, index) => new { n, index }))
        {
        var separator = nest.index == 0 ? "" : ",";
        <text>@separator{
            id: '@nest.n.id',
            lat: @nest.n.lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
            lng: @nest.n.lng.ToString(System.Globalization.CultureInfo.InvariantCulture),
            radius: @nest.n.radius.ToString(System.Globalization.CultureInfo.InvariantCulture),
            timestamp: '@nest.n.LastUpdatedString',
            IsDestroyed: @(nest.n.IsDestroyed ? 1 : 0)
        }</text>
        }
    ];

    var nestCircles = [];

    function clearNestCircles() {
        console.log("Clearing nest circles...");
        nestCircles.forEach(function(circle) {
            map.removeLayer(circle);
        });
        nestCircles = [];
    }

    function renderNestCircles() {
        console.log("Rendering nest circles...");
        clearNestCircles();
        var showDestroyed = document.getElementById('showDestroyedToggle').checked;
        nestEstimates.forEach(function(nest) {
            if (!showDestroyed && nest.IsDestroyed === 1) {
                console.log("Skipping destroyed nest:", nest);
                return;
            }
            var circleColor = nest.IsDestroyed === 1 ? "green" : "red";
            var fillColor = nest.IsDestroyed === 1 ? "#0f0" : "#f03";
            var circle = L.circle([nest.lat, nest.lng], {
                color: circleColor,
                fillColor: fillColor,
                fillOpacity: 0.5,
                radius: parseFloat(nest.radius)
            }).addTo(map).bindPopup(`Accuracy: ${parseFloat(nest.radius).toFixed(2)}m`);

            circle.on('click', function () {
                console.log("Nest circle clicked:", nest);
                selectedNestId = nest.id;
                document.getElementById('accuracy').innerText = parseFloat(nest.radius).toFixed(2);
                document.getElementById('timestamp').innerText = nest.timestamp;
                document.getElementById('status').innerText = (nest.IsDestroyed == 1) ? "Destroyed" : "Active";
                document.getElementById('id').value = nest.id;

                // Convert numeric status to boolean and toggle it.
                var isCurrentlyDestroyed = (nest.IsDestroyed == 1);
                var newStatus = !isCurrentlyDestroyed;
                document.getElementById('isDestroyed').value = newStatus.toString();

                var toggleBtn = document.getElementById('toggle-status-btn');
                toggleBtn.innerText = newStatus ? "Mark as Destroyed" : "Mark as Active";
                document.getElementById('default-message').style.display = 'none';
                document.getElementById('accuracy-label').classList.remove('hidden');
                document.getElementById('timestamp-label').classList.remove('hidden');
                document.getElementById('status-label').classList.remove('hidden');
                document.getElementById('nest-status-buttons').classList.remove('hidden');
            });
            nestCircles.push(circle);
        });
    }

    document.getElementById('showDestroyedToggle').addEventListener('change', function () {
        console.log("Toggle changed. Re-rendering nest circles...");
        renderNestCircles();
    });

    renderNestCircles();

    document.getElementById('nest-status-form').addEventListener('submit', function (e) {
        console.log("Nest status form submitted.");
    });
</script>
}
