@{
ViewData["Title"] = "Home Page";
var devices = ViewData["Devices"] as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>();
var nestEstimates = ViewData["NestEstimates"] as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>();
}

<div class="container mx-auto mt-10 dark:bg-gray-900">
    <div class="flex justify-left mb-6">
        <h1 class="text-5xl font-bold text-gray-800 dark:text-yellow-400">🐝 Overview</h1>
    </div>

    <div class="flex flex-wrap lg:flex-nowrap items-start gap-8 p-12 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-lg">
        <!-- Leaflet Map - Slightly Reduced Width -->
        <div class="w-full lg:w-2/3 border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden shadow-md z-0">
            <div id="map" class="w-full h-[60vh] dark:bg-gray-700 z-0"></div>
        </div>

        <!-- Information Section (More Space) -->
        <div class="w-full lg:w-1/3 flex flex-col gap-6">
            <!-- Hornet Nest Info Box -->
            <div class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                <h3 class="text-2xl font-bold flex items-center dark:text-yellow-400">
                    <span class="mr-2">🐝</span> Hornet Nest Info
                </h3>
                <p id="default-message" class="text-gray-600 dark:text-gray-300 mt-4 italic">
                    Click on a nest to view details.
                </p>
                <p id="accuracy-label" class="text-gray-700 dark:text-gray-300 mt-2 hidden">
                    📏 Accuracy Radius: <b id="accuracy"></b> meters
                </p>
                <p id="timestamp-label" class="text-gray-700 dark:text-gray-300 mt-2 hidden">
                    ⏱ Last Updated: <b id="timestamp"></b>
                </p>
                <p id="status-label" class="text-gray-700 dark:text-gray-300 mt-2 hidden">
                    ⚠ Status: <b id="status"></b>
                </p>
            </div>

            <!-- Device Overview Box -->
            <div class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                <h3 class="text-2xl font-bold flex items-center dark:text-yellow-400">
                    <span class="mr-2">📡</span> Device Overview
                </h3>
                <p class="mt-4 text-gray-600 dark:text-gray-300">Total Devices: <b>@devices.Count()</b></p>
                <p class="mt-2 text-gray-600 dark:text-gray-300">Online Devices: <b id="online-device-count">@devices.Count(d => d.IsOnline)</b></p>
                <p class="mt-2 text-gray-600 dark:text-gray-300">Tracking Mode: <b>@devices.Count(d => d.IsTracking)</b></p>
            </div>

            <!-- Device Info Box -->
            <div class="bg-white dark:bg-gray-700 dark:text-white p-6 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600">
                <h3 class="text-2xl font-bold flex items-center dark:text-yellow-400">
                    <span class="mr-2">🔍</span> Device Info
                </h3>
                <p id="device-message" class="text-gray-600 dark:text-gray-300 mt-4">
                    Click on a device marker to see details.
                </p>
                <p id="device-status-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Status: <b id="device-status"></b>
                </p>
                <p id="device-mode-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Current mode: <b id="device-mode"></b>
                </p>
                <p id="device-last-active-label" class="text-gray-600 dark:text-gray-300 mt-2 hidden">
                    Last active: <b id="device-last-active"></b>
                </p>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
<script>
    // Initialize the map
    var map = L.map('map');
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    // Store device bounds for fitting the map later
    var deviceBounds = [];

    // Device data from the backend
    var devices = [
        @foreach (var device in devices)
        {
        <text>, {
            lat: @device.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
            lng: @device.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
            id: '@device.Id',
            isOnline: @(device.IsOnline ? "true" : "false"),
            isTracking: @(device.IsTracking ? "true" : "false"),
            lastActive: '@device.LastActiveString'
        }, </text>
        }
    ];

    // Add markers for all devices
    devices.forEach(device => {
        if (device.lat && device.lng) {
            var markerColor = device.isOnline === "true" ? "blue" : "gray";
            var deviceMarker = L.marker([device.lat, device.lng])
                .addTo(map)
                .bindPopup(`
                        <b>Device Info</b><br>
                        Status: ${device.isOnline === "true" ? 'Online' : 'Offline'}<br>
                        Mode: ${device.isTracking === "true" ? 'Tracking' : 'Defence'}<br>
                        Last Active: ${device.lastActive}
                    `);

            // Store marker location to fit bounds later
            deviceBounds.push([device.lat, device.lng]);

            deviceMarker.on('click', function () {
                document.getElementById('device-status').innerText = device.isOnline === "true" ? 'Online' : 'Offline';
                document.getElementById('device-mode').innerText = device.isTracking === "true" ? 'Tracking' : 'Defence';
                document.getElementById('device-last-active').innerText = device.lastActive;

                // Hide default message and show device info labels
                document.getElementById('device-message').style.display = 'none';
                document.getElementById('device-status-label').classList.remove('hidden');
                document.getElementById('device-mode-label').classList.remove('hidden');
                document.getElementById('device-last-active-label').classList.remove('hidden');
            });
        }
    });

    // Adjust map view to fit all device markers
    if (deviceBounds.length > 0) {
        map.fitBounds(deviceBounds, {
            padding: [50, 50],
            maxZoom: 18,
            animate: true
        });
    } else {
        map.setView([51.168300, 4.980980], 10);
    }

    // Nest data array from the backend using the projected properties
    var nestEstimates = [
        @foreach (var nest in (IEnumerable<dynamic>)ViewData["NestEstimates"])
        {
        <text>, {
            lat: @nest.lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
            lng: @nest.lng.ToString(System.Globalization.CultureInfo.InvariantCulture),
            radius: @nest.radius.ToString(System.Globalization.CultureInfo.InvariantCulture),
            timestamp: '@nest.LastUpdatedString',
            IsDestroyed: @(nest.IsDestroyed ? 1 : 0)
        }, </text>
        }
    ];

    // Add circles for all nest estimates with accuracy formatted to 2 decimals.
    nestEstimates.forEach(nest => {
        var circleColor = nest.IsDestroyed === 1 ? "green" : "red";
        var fillColor = nest.IsDestroyed === 1 ? "#0f0" : "#f03";

        var circle = L.circle([nest.lat, nest.lng], {
            color: circleColor,
            fillColor: fillColor,
            fillOpacity: 0.5,
            radius: parseFloat(nest.radius)
        }).addTo(map).bindPopup(`Accuracy: ${parseFloat(nest.radius).toFixed(2)}m`);

        // Click event to show nest details
        circle.on('click', function () {
            document.getElementById('accuracy').innerText = parseFloat(nest.radius).toFixed(2);
            document.getElementById('timestamp').innerText = nest.timestamp;
            document.getElementById('status').innerText = nest.IsDestroyed === 1 ? "Destroyed" : "Active";

            // Hide the default message and show actual info
            document.getElementById('default-message').style.display = 'none';
            document.getElementById('accuracy-label').classList.remove('hidden');
            document.getElementById('timestamp-label').classList.remove('hidden');
            document.getElementById('status-label').classList.remove('hidden');
        });
    });
</script>
}
