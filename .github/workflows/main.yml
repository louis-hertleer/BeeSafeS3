name: Deploy to Azure
'on':
  push:
    branches:
      - main
      - pipelinedatabase-lh
jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: Build Docker Image
        run: >-
          docker build -t ${{ secrets.DOCKER_USERNAME }}/beesafeapp:latest
          ./BeeSafeWeb/
      - name: Push Docker Image to DockerHub
        run: 'docker push ${{ secrets.DOCKER_USERNAME }}/beesafeapp:latest'
  deploy:
    name: Deploy to Azure Container Instance
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Check if MySQL Server exists
        id: check-server-exists
        run: >
          SERVER_EXISTS=$(az mysql flexible-server show --name
          beesafe-mysql-server --resource-group BeeSafe --query "name" -o tsv ||
          echo "")

          echo "Server Exists: $SERVER_EXISTS"
          
          if [[ -n "$SERVER_EXISTS" ]]; then
            echo "MySQL server already exists, skipping creation."
          else
            echo "MySQL server does not exist, proceeding with creation."
            az mysql flexible-server create \
              --name beesafe-mysql-server \
              --resource-group BeeSafe \
              --location uksouth \
              --admin-user ${{ secrets.MYSQL_USER }} \
              --admin-password ${{ secrets.MYSQL_PASSWORD }} \
              --sku-name Standard_B1ms \
              --storage-size 32 \
              --version 8.0.21 \
              --public-access 0.0.0.0
          fi
      - name: Check if MySQL Database exists
        run: |
          DB_EXISTS=$(az mysql flexible-server db list \
            --server-name beesafe-mysql-server \
            --resource-group BeeSafe \
            --query "[?name=='beesafe-db']" -o tsv)
          
          if [[ -z "$DB_EXISTS" ]]; then
            echo "Database 'beesafe-db' does not exist. Creating the database..."
            az mysql flexible-server db create \
              --resource-group BeeSafe \
              --server-name beesafe-mysql-server \
              --database-name beesafe-db
          else
            echo "Database 'beesafe-db' already exists. Skipping creation."
          fi
      - name: Construct Connection String
        id: connection-string
        run: >
          # Construct the connection string using secrets
          CONNECTION_STRING="Server=dbbeesafe.database.windows.net;Database=beesafe-db;User
          Id=${{ secrets.MYSQL_USER }};Password=${{ secrets.MYSQL_PASSWORD }};"
          # Set the environment variable for use in subsequent steps
          echo "CONNECTION_STRING=$CONNECTION_STRING" >> $GITHUB_ENV
      - name: Deploy Container to Azure Container Instance
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          retry_wait_seconds: 15
          command: |
            az container create \
              --name beesafe-api-container \
              --resource-group BeeSafe \
              --image docker.io/${{ secrets.DOCKER_USERNAME }}/beesafeapp:latest \
              --cpu 0.5 \
              --memory 1.0 \
              --location uksouth \
              --registry-login-server docker.io \
              --registry-username ${{ secrets.DOCKER_USERNAME }} \
              --registry-password ${{ secrets.DOCKER_PASSWORD }} \
              --ports 8080 8081 \
              --environment-variables ConnectionStrings__DefaultConnection="Server=tcp:dbbeesafe.database.windows.net,1433;Initial Catalog=beesafe;Persist Security Info=False;User ID=${{ secrets.MYSQL_USER }};Password=${{ secrets.MYSQL_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" \
              --ip-address public \
              --os-type Linux \
              --restart-policy Always
      - name: Get Public IP
        run: |
          echo "Container Instance Public IP:"
          az container show \
            --name beesafe-api-container \
            --resource-group BeeSafe \
            --query "ipAddress.ip" \
            --output tsv