name: Deploy to Azure
'on':
  push:
    branches:
      - main
      - test
  # Run full pipeline on push to main
jobs:
  # Build the Docker image and push it to DockerHub
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: Build Docker Image
        run: >-
          docker build -t ${{ secrets.DOCKER_USERNAME }}/beesafeapp:latest
          ./BeeSafeWeb/
      - name: Push Docker Image to DockerHub
        run: 'docker push ${{ secrets.DOCKER_USERNAME }}/beesafeapp:latest'
  # Deploy job to provision application to Azure
  deploy:
    name: Deploy to Azure Container Instance
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Check if SQL Server exists  # Create SQL server to be able to create database
        id: check-server-exists
        run: |
          SERVER_EXISTS=$(az sql server show --name dbbeesafe --resource-group BeeSafe --query "name" -o tsv || echo "")
          echo "Server Exists: $SERVER_EXISTS"
          
          if [[ -n "$SERVER_EXISTS" ]]; then
            echo "SQL server already exists, skipping creation."
          else
            echo "SQL server does not exist, proceeding with creation."
            az sql server create \
              --name dbbeesafe \
              --resource-group BeeSafe \
              --location uksouth \
              --admin-user ${{ secrets.SQL_USER }} \
              --admin-password ${{ secrets.SQL_PASSWORD }}
          fi

      - name: Check if SQL Database exists # Database to store application data
        run: |
          DB_EXISTS=$(az sql db list \
          --server dbbeesafe \
          --resource-group BeeSafe \
          --query "[?name=='beesafe']" -o tsv)
          if [[ -z "$DB_EXISTS" ]]; then
            echo "Database 'beesafe' does not exist. Creating the database..."
            az sql db create \
              --resource-group BeeSafe \
              --server dbbeesafe \
              --name beesafe-db \
          else
            echo "Database 'beesafe' already exists. Skipping creation."
          fi

      - name: Check if Container App Environment Exists # Container app environment (CAE) needed to run container app in
        run: |
          ENV_NAME="caebeesafe"
          RESOURCE_GROUP="BeeSafe"
          LOCATION="uksouth"
          EXISTING_ENV=$(az containerapp env show \
            --name $ENV_NAME \
            --resource-group $RESOURCE_GROUP \
            --query "name" \
            --output tsv || echo "none")
          if [ "$EXISTING_ENV" = "none" ]; then
            echo "Environment does not exist. Creating..."
            az containerapp env create \
              --name $ENV_NAME \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION
          else
            echo "Environment $ENV_NAME already exists. Skipping creation."
          fi
          
      - name: Deploy Container to Azure Container Instance # Deploy the container app in the CAE
        uses: nick-invision/retry@v2 # If container app fails to create, retry 2 more times
        with:
          timeout_minutes: 3 
          max_attempts: 3
          retry_wait_seconds: 15
          command: |
            az containerapp create \
              --name beesafe-app-container \
              --resource-group BeeSafe \
              --image docker.io/${{ secrets.DOCKER_USERNAME }}/beesafeapp:latest \
              --cpu 0.5 \
              --memory 1.0 \
              --registry-server docker.io \
              --registry-username ${{ secrets.DOCKER_USERNAME }} \
              --registry-password ${{ secrets.DOCKER_PASSWORD }} \
              --target-port 8080 \
              --env-vars ConnectionStrings__DefaultConnection="Server=tcp:dbbeesafe.database.windows.net,1433;Initial Catalog=beesafe;Persist Security Info=False;User ID=${{ secrets.SQL_USER }};Password=${{ secrets.SQL_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" \
              --ingress external \
              --environment caebeesafe 
          # Create container app by pulling docker image from DockerHub, open port 8080 for application, add connection string for connection with database, ingress external to make it publicly available

      - name: Get Domain Name and Save to ENV # Get domain name from application app, save it to variable for later DAST testing
        id: get-fqdn
        run: |
          # Get the FQDN of the deployed container app
          fqdn=$(az containerapp show \
            --name beesafe-app-container \
            --resource-group BeeSafe \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          # Output the FQDN for other steps
          echo "APPLICATION_URL=https://$fqdn" >> $GITHUB_ENV
          echo "Container App Public URL: https://$fqdn"
